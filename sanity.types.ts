/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderName?: string;
  stripeCheckoutSessionID?: string;
  clerkUserID?: string;
  customerName?: string;
  email?: string;
  products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    Quantiy?: number;
    _key: string;
  }>;
  totalprice?: number;
  currencyc?: number;
  amountDiscount?: number;
  status?: "pending" | "paid" | "shipper" | "delivered" | "canceled";
  orderDate?: string;
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  originalPrice?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  sku?: string;
  brand?: string;
  rating?: {
    value?: number;
    count?: number;
  };
  features?: Array<{
    title?: string;
    description?: string;
    _key: string;
  }>;
  specifications?: Array<{
    name?: string;
    value?: string;
    _key: string;
  }>;
  isNew?: boolean;
  isOnSale?: boolean;
  saleEndDate?: string;
  tags?: Array<string>;
  metaDescription?: string;
  metaKeywords?: Array<string>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Order | Sale | Product | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/categories/getCategories.ts
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"] | order(title asc) {      _id,      title,      "slug": slug.current,      description    }
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
}>;

// Source: ./sanity/lib/orders/getMyOrders.tsx
// Variable: MY_ORDERS_QUERY
// Query: *[_type == "order" && clerkUserId == $userId] | order(orderDate desc) {            products[]{                product->            }        }
export type MY_ORDERS_QUERYResult = Array<{
  products: Array<{
    product: {
      _id: string;
      _type: "product";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      mainImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        _type: "image";
      };
      gallery?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        _type: "image";
        _key: string;
      }>;
      description?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }>;
      price?: number;
      originalPrice?: number;
      categories?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "category";
      }>;
      stock?: number;
      sku?: string;
      brand?: string;
      rating?: {
        value?: number;
        count?: number;
      };
      features?: Array<{
        title?: string;
        description?: string;
        _key: string;
      }>;
      specifications?: Array<{
        name?: string;
        value?: string;
        _key: string;
      }>;
      isNew?: boolean;
      isOnSale?: boolean;
      saleEndDate?: string;
      tags?: Array<string>;
      metaDescription?: string;
      metaKeywords?: Array<string>;
    } | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/getAllCategories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[            _type == "category"        ] | order(name asc)
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
}>;

// Source: ./sanity/lib/products/getAllProducts.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[            _type == "product"        ] | order(name asc) {            _id,            name,            slug,            mainImage {                asset->,                alt,                caption            },            description,            price,            categories[]-> {                _id,                name            },            stock,            sku,            brand,            rating,            features,            specifications,            isNew,            isOnSale,            saleEndDate,            tags,            metaDescription,            metaKeywords        }
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
    caption: string | null;
  } | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  categories: Array<{
    _id: string;
    name: null;
  }> | null;
  stock: number | null;
  sku: string | null;
  brand: string | null;
  rating: {
    value?: number;
    count?: number;
  } | null;
  features: Array<{
    title?: string;
    description?: string;
    _key: string;
  }> | null;
  specifications: Array<{
    name?: string;
    value?: string;
    _key: string;
  }> | null;
  isNew: boolean | null;
  isOnSale: boolean | null;
  saleEndDate: string | null;
  tags: Array<string> | null;
  metaDescription: string | null;
  metaKeywords: Array<string> | null;
}>;

// Source: ./sanity/lib/products/getProductsByCategory.tsx
// Variable: PRODUCTS_BY_CATEGORY_QUERY
// Query: *[      _type == "product"      && references(*[_type == "category" && slug.current == $categorySlug]._id)    ] | order(name asc) {      _id,      name,      slug,      mainImage {        asset->,        alt,        caption      },      description,      price,      categories[]-> {        _id,        title,        slug      },      stock,      sku,      brand,      rating,      features,      specifications,      isNew,      isOnSale,      saleEndDate,      tags,      metaDescription,      metaKeywords    }
export type PRODUCTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
    caption: string | null;
  } | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  stock: number | null;
  sku: string | null;
  brand: string | null;
  rating: {
    value?: number;
    count?: number;
  } | null;
  features: Array<{
    title?: string;
    description?: string;
    _key: string;
  }> | null;
  specifications: Array<{
    name?: string;
    value?: string;
    _key: string;
  }> | null;
  isNew: boolean | null;
  isOnSale: boolean | null;
  saleEndDate: string | null;
  tags: Array<string> | null;
  metaDescription: string | null;
  metaKeywords: Array<string> | null;
}>;

// Source: ./sanity/lib/products/searchProductsByName.ts
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[            _type == "product" && (                name match $searchParam ||                description match $searchParam ||                brand match $searchParam ||                tags match $searchParam            )        ] | order(name asc) {            _id,            name,            slug,            mainImage {                asset->,                alt,                caption            },            description,            price,            categories[]-> {                _id,                title,                slug            },            stock,            sku,            brand,            rating,            features,            specifications,            isNew,            isOnSale,            saleEndDate,            tags,            metaDescription,            metaKeywords        }
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
    caption: string | null;
  } | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  stock: number | null;
  sku: string | null;
  brand: string | null;
  rating: {
    value?: number;
    count?: number;
  } | null;
  features: Array<{
    title?: string;
    description?: string;
    _key: string;
  }> | null;
  specifications: Array<{
    name?: string;
    value?: string;
    _key: string;
  }> | null;
  isNew: boolean | null;
  isOnSale: boolean | null;
  saleEndDate: string | null;
  tags: Array<string> | null;
  metaDescription: string | null;
  metaKeywords: Array<string> | null;
}>;

// Source: ./sanity/lib/sales/getActiveSaleByCouponCode.ts
// Variable: ACTIVE_SALE_BY_COUPON_QUERY
// Query: *[            _type == "sale"            &&isActive == true      //Sale type            &&couponCode == $couponCode //{Perameters}        ] | order(validFrom desc)[0]
export type ACTIVE_SALE_BY_COUPON_QUERYResult = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"category\"] | order(title asc) {\n      _id,\n      title,\n      \"slug\": slug.current,\n      description\n    }\n  ": CATEGORIES_QUERYResult;
    "\n        *[_type == \"order\" && clerkUserId == $userId] | order(orderDate desc) {\n            products[]{\n                product->\n            }\n        }\n    ": MY_ORDERS_QUERYResult;
    "\n        *[\n            _type == \"category\"\n        ] | order(name asc)": ALL_CATEGORIES_QUERYResult;
    "\n        *[\n            _type == \"product\"\n        ] | order(name asc) {\n            _id,\n            name,\n            slug,\n            mainImage {\n                asset->,\n                alt,\n                caption\n            },\n            description,\n            price,\n            categories[]-> {\n                _id,\n                name\n            },\n            stock,\n            sku,\n            brand,\n            rating,\n            features,\n            specifications,\n            isNew,\n            isOnSale,\n            saleEndDate,\n            tags,\n            metaDescription,\n            metaKeywords\n        }": ALL_PRODUCTS_QUERYResult;
    "\n    *[\n      _type == \"product\"\n      && references(*[_type == \"category\" && slug.current == $categorySlug]._id)\n    ] | order(name asc) {\n      _id,\n      name,\n      slug,\n      mainImage {\n        asset->,\n        alt,\n        caption\n      },\n      description,\n      price,\n      categories[]-> {\n        _id,\n        title,\n        slug\n      },\n      stock,\n      sku,\n      brand,\n      rating,\n      features,\n      specifications,\n      isNew,\n      isOnSale,\n      saleEndDate,\n      tags,\n      metaDescription,\n      metaKeywords\n    }\n  ": PRODUCTS_BY_CATEGORY_QUERYResult;
    "\n        *[\n            _type == \"product\" && (\n                name match $searchParam ||\n                description match $searchParam ||\n                brand match $searchParam ||\n                tags match $searchParam\n            )\n        ] | order(name asc) {\n            _id,\n            name,\n            slug,\n            mainImage {\n                asset->,\n                alt,\n                caption\n            },\n            description,\n            price,\n            categories[]-> {\n                _id,\n                title,\n                slug\n            },\n            stock,\n            sku,\n            brand,\n            rating,\n            features,\n            specifications,\n            isNew,\n            isOnSale,\n            saleEndDate,\n            tags,\n            metaDescription,\n            metaKeywords\n        }\n    ": PRODUCT_SEARCH_QUERYResult;
    "\n        *[\n            _type == \"sale\"\n            &&isActive == true      //Sale type\n            &&couponCode == $couponCode //{Perameters}\n        ] | order(validFrom desc)[0]\n        ": ACTIVE_SALE_BY_COUPON_QUERYResult;
  }
}
